
// By Shuruhatik#2443
class InteractionCollector {
  constructor(client, options) {
    this.client = client;
    this.channel = options.channel;
    this.time = options.time;
    this.interactions = [];
    this.ended = false;

    this.listener = (interaction) => {
      if (this.channel && interaction.channel.id !== this.channel.id) return;
      this.interactions.push(interaction);
      this.emit("collect", interaction);
    };

    this.client.on("interactionCreate", this.listener);

    if (this.time) {
      setTimeout(() => {
        this.end("time");
      }, this.time);
    }
  }

  end(reason) {
    if (this.ended) return;
    this.ended = true;
    this.client.removeListener("interactionCreate", this.listener);
    this.emit("end", this.interactions, reason);
  }

  on(event, listener) {
    if (!this._events) {
      this._events = {};
    }
    if (!this._events[event]) {
      this._events[event] = [];
    }
    this._events[event].push(listener);
  }

  emit(event, ...args) {
    if (this._events && this._events[event]) {
      for (const listener of this._events[event]) {
        listener(...args);
      }
    }
  }
}

export { InteractionCollector };